using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;
[RealtimeModel]
public partial class FinalScoreModel 
{   [RealtimeProperty(1,true,true)]
    private int _finalScore;
    [RealtimeProperty(2, true, true)]
    private int _blockCount;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class FinalScoreModel : IModel {
    // Properties
    public int finalScore {
        get { return _cache.LookForValueInCache(_finalScore, entry => entry.finalScoreSet, entry => entry.finalScore); }
        set { if (value == finalScore) return; _cache.UpdateLocalCache(entry => { entry.finalScoreSet = true; entry.finalScore = value; return entry; }); FireFinalScoreDidChange(value); }
    }
    public int blockCount {
        get { return _cache.LookForValueInCache(_blockCount, entry => entry.blockCountSet, entry => entry.blockCount); }
        set { if (value == blockCount) return; _cache.UpdateLocalCache(entry => { entry.blockCountSet = true; entry.blockCount = value; return entry; }); FireBlockCountDidChange(value); }
    }
    
    // Events
    public delegate void FinalScoreDidChange(FinalScoreModel model, int value);
    public event         FinalScoreDidChange finalScoreDidChange;
    public delegate void BlockCountDidChange(FinalScoreModel model, int value);
    public event         BlockCountDidChange blockCountDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool finalScoreSet;
        public int  finalScore;
        public bool blockCountSet;
        public int  blockCount;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public FinalScoreModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FireFinalScoreDidChange(int value) {
        try {
            if (finalScoreDidChange != null)
                finalScoreDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireBlockCountDidChange(int value) {
        try {
            if (blockCountDidChange != null)
                blockCountDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        FinalScore = 1,
        BlockCount = 2,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _finalScore = finalScore;
            _blockCount = blockCount;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteVarint32Length((uint)PropertyID.FinalScore, (uint)_finalScore);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.BlockCount, (uint)_blockCount);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.finalScoreSet)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.FinalScore, (uint)entry.finalScore);
                if (entry.blockCountSet)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.BlockCount, (uint)entry.blockCount);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteVarint32((uint)PropertyID.FinalScore, (uint)_finalScore);
            stream.WriteVarint32((uint)PropertyID.BlockCount, (uint)_blockCount);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.finalScoreSet || entry.blockCountSet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.finalScoreSet)
                    stream.WriteVarint32((uint)PropertyID.FinalScore, (uint)entry.finalScore);
                if (entry.blockCountSet)
                    stream.WriteVarint32((uint)PropertyID.BlockCount, (uint)entry.blockCount);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool finalScoreExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.finalScoreSet);
        bool blockCountExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.blockCountSet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.FinalScore: {
                    int previousValue = _finalScore;
                    
                    _finalScore = (int)stream.ReadVarint32();
                    
                    if (!finalScoreExistsInChangeCache && _finalScore != previousValue)
                        FireFinalScoreDidChange(_finalScore);
                    break;
                }
                case (uint)PropertyID.BlockCount: {
                    int previousValue = _blockCount;
                    
                    _blockCount = (int)stream.ReadVarint32();
                    
                    if (!blockCountExistsInChangeCache && _blockCount != previousValue)
                        FireBlockCountDidChange(_blockCount);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
